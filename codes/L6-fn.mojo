# L6: fn of Mojo 🔥
# python의 def는 다이나믹하고 유동성이 강한 함수를 정의하는 방법으로 속도에서 한계를 지닌다.
# 이를 보완하기 위해 Mojo에서는 fn를 사용하는데, 이는 유동성과 다이나믹함을 일부 포기하고 속도를 높이는 방법이다. 
# 그러므로, Mojo의 강점을 살리기 위해서는 fn을 사용하는 것이 좋다. 그러나, 파이썬과의 높은 호환성을 위해 def를 사용할 수도 있다.

fn func1():
    # Mojo가 제시하는 새로운 함수 정의 방법
    print("func1")

@strict
def func2():
    # fn을 사용하는 것과 동일한 효과
    print("func2")

def func3():
    # def를 사용하는 것과 동일한 효과, 그러나 속도가 느림
    # 인자로 들어오는 데이터를 모두 복사하여 함수 내부로 가지고와 자유롭게 변경이 가능함.
    # 이는 속도를 느리게 하고, 메모리를 많이 차지함.
    print("func3")


# def는 fn이 제공하는 모든 기능을 지원함 (높은 호환성)
# fn은 def에 비해 가지는 제약사항이 있음 (높은 속도)
# 제약 1. fn은 기본적으로 immutable(변경 불가능, borrowed)를 통해 데이터를 받아 높은 속도와 메모리 효율을 보장함. 실수를 방지하기 위해 immutable을 사용함.
# 제약 2. self를 제외한 모든 인자의 타입을 명시해야함. return의 경우, ->를 통해 명시하지 않으면 None으로 자동으로 처리함.
# 제약 3. fn 내부에서 정의되는 모든 변수들은 let, var를 통해 mutable여부를 명시해야함.
# 제약 4. fn, def 모두 exception을 지원하나, fn의 경우 `raises`를 통해 명시해야함.

# 이러한 제약이 불편함에도 불구하고 빠른 속도와 메모리 효율성, 파이썬의 다양한 프로그래밍 패턴으로 인한 실수 및 협업의 어려움을 방지하기 위해 제약을 두고 있음.